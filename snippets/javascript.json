{
  "Boilerplate MERN Server": {
    "prefix": "dserver",
    "body": [
      "const express = require('express');",
      "const mongoose = require('mongoose');",
      "const bodyParser = require('body-parser');",
      "const app = express();",
      "",
      "app.use(bodyParser.json());",
      "",
      "const db = require('./config/keys').mongoURI;",
      "",
      "mongoose.connect(db, { useNewUrlParser: true, useUnifiedTopology: true })",
      "  .then(() => console.log('ðŸ’» MongoDB Connected ðŸ¥œ'))",
      "  .catch(err => console.error(err));",
      "",
      "app.get('/', (req, res) => { res.send('ðŸš€ Server working ðŸ¥œ'); });",
      "",
      "const port = process.env.PORT || 5000;",
      "",
      "app.listen(port, () => console.log(`ðŸš€ Server running on port ${port} ðŸ¥œ`));"
    ],
    "description": "Create a boilerplate MERN server"
  },
  "Boilerplate React Page": {
    "prefix": "dreact",
    "body": [
      "import React from 'react';",
      "import '../styles/$1';",
      "",
      "function $2() {",
      "  return (",
      "    <div id='wrapper--$3'>",
      "      <h1>deezSnippets ðŸ¥œ</h1>",
      "    </div>",
      "  );",
      "};",
      "",
      "export default $2;"
    ],
    "description": "Create a boilerplate React Page"
  },
  "Boilerplate Mongo Schema": {
    "prefix": "dschema",
    "body": [
      "const mongoose = require('mongoose');",
      "",
      "const $1Schema = new mongoose.Schema({",
      "  $2: $3,",
      "  $4: $5",
      "});",
      "",
      "const $1 = mongoose.model('$1', $1Schema);",
      "",
      "module.exports = $1;"
    ],
    "description": "Create a boilerplate MongoDB schema using Mongoose"
  },
  "Call Backend with Axios": {
    "prefix": "daxios",
    "body": [
      "const axios = require('axios');",
      "",
      "axios.get('$1')",
      "  .then(response => {",
      "    console.log(response.data);",
      "  })",
      "  .catch(error => {",
      "    console.error(error);",
      "  });"
    ],
    "description": "Make a HTTP GET request to the backend using Axios"
  },
  "Gitignore Template": {
    "prefix": "dgitignore",
    "body": [
      "# Node.js and NPM",
      "node_modules/",
      "npm-debug.log",
      "yarn-error.log",
      "",
      "# Compiled output",
      "/dist/",
      "/build/",
      "/out/",
      "/public/bundle.js",
      "",
      "# Environment files",
      ".env",
      ".env.local",
      ".env.development.local",
      ".env.test.local",
      ".env.production.local",
      "",
      "# MacOS .DS_Store files",
      ".DS_Store",
      "",
      "# Visual Studio Code",
      ".vscode/",
      "",
      "# Log files",
      "logs/",
      "*.log",
      "npm-debug.log*",
      "",
      "# Editor-specific files",
      ".idea/",
      "*.suo",
      "*.ntvs*",
      "*.njsproj",
      "*.sln",
      ".vscode/",
      "",
      "# Dependency directories",
      "/bower_components/",
      "/jspm_packages/",
      "",
      "# Typescript configuration",
      "tsconfig.json",
      "tsconfig.tsbuildinfo",
      "",
      "# Grunt intermediate storage (https://gruntjs.com/creating-plugins#storing-task-files)",
      ".grunt",
      "",
      "# Android",
      "android/",
      "ios/",
      "",
      "# Jest",
      "coverage/",
      "",
      "# Yarn",
      "yarn-error.log"
    ]
  }
}