{
  "Boilerplate MERN Server": {
    "prefix": "dserver",
    "body": [
      "const express = require('express');",
      "const mongoose = require('mongoose');",
      "const bodyParser = require('body-parser');",
      "const app = express();",
      "",
      "app.use(bodyParser.json());",
      "",
      "const db = require('./config/keys').mongoURI;",
      "",
      "mongoose.connect(db, { useNewUrlParser: true, useUnifiedTopology: true })",
      "  .then(() => console.log('ðŸ’» MongoDB Connected ðŸ¥œ'))",
      "  .catch(err => console.error(err));",
      "",
      "app.get('/', (req, res) => { res.send('ðŸš€ Server working ðŸ¥œ'); });",
      "",
      "const port = process.env.PORT || 5000;",
      "",
      "app.listen(port, () => console.log(`ðŸš€ Server running on port ${port} ðŸ¥œ`));"
    ],
    "description": "Create a boilerplate MERN server"
  },
  "Boilerplate React Functional Component": {
    "prefix": "drfc",
    "body": [
      "import React from 'react';",
      "import '../styles/$1';",
      "",
      "function $2() {",
      "  return (",
      "    <div id='wrapper--$3'>",
      "      <h1>deezSnippets ðŸ¥œ</h1>",
      "    </div>",
      "  );",
      "};",
      "",
      "export default $2;"
    ],
    "description": "Create a boilerplate React Functional Component"
  },
  "Boilerplate React Class Component": {
    "prefix": "drcc",
    "body": [
      "import React, { Component } from 'react';",
      "import '../styles/$1';",
      "",
      "class $2 extends Component {",
      "  render() {",
      "    return (",
      "      <div id='wrapper--$3'>",
      "        <h1>deezSnippets ðŸ¥œ</h1>",
      "      </div>",
      "    );",
      "  }",
      "}",
      "",
      "export default $2;"
    ],
    "description": "Create a boilerplate React Class-based Component"
  },
  "Import and Use useState Hook": {
    "prefix": "duseState",
    "body": [
      "import React, { useState } from 'react';",
      "",
      "function $1() {",
      "  const [$2, set$2] = useState($3);",
      "  return (",
      "    <div>",
      "      <h1>$2</h1>",
      "      <button onClick={() => set$2($3 + 1)}>Increment</button>",
      "    </div>",
      "  );",
      "}",
      "",
      "export default $1;"
    ],
    "description": "Import and use the useState hook"
  },
  "Import and Use useEffect Hook": {
    "prefix": "duseEffect",
    "body": [
      "import React, { useEffect } from 'react';",
      "",
      "function $1() {",
      "  useEffect(() => {",
      "    // Your effect code here",
      "  }, []);",
      "",
      "  return (",
      "    <div>",
      "      <h1>$2</h1>",
      "    </div>",
      "  );",
      "}",
      "",
      "export default $1;"
    ],
    "description": "Import and use the useEffect hook"
  },
  "Import and Use useContext Hook": {
    "prefix": "duseContext",
    "body": [
      "import React, { useContext } from 'react';",
      "",
      "const $1Context = React.createContext();",
      "",
      "function $2() {",
      "  const $3 = useContext($1Context);",
      "",
      "  return (",
      "    <div>",
      "      <h1>$4</h1>",
      "    </div>",
      "  );",
      "}",
      "",
      "export default $2;"
    ],
    "description": "Import and use the useContext hook"
  },        
  "Boilerplate Mongo Schema": {
    "prefix": "dmongo",
    "body": [
      "const mongoose = require('mongoose');",
      "",
      "const $1Schema = new mongoose.Schema({",
      "  $2: $3,",
      "  $4: $5",
      "});",
      "",
      "const $1 = mongoose.model('$1', $1Schema);",
      "",
      "module.exports = $1;"
    ],
    "description": "Create a boilerplate MongoDB schema using Mongoose"
  },
  "Call Backend with Axios": {
    "prefix": "daxios",
    "body": [
      "const axios = require('axios');",
      "",
      "axios.$1('$2')",
      "  .then(response => {",
      "    console.log(response.data);",
      "  })",
      "  .catch(error => {",
      "    console.error(error);",
      "  });"
    ],
    "description": "Make a HTTP request to the backend using Axios"
  },
  "Express Controller": {
    "prefix": "dcontroller",
    "body": [
      "const express = require('express');",
      "const router = express.Router();",
      "",
      "router.get('/', (req, res) => {",
      "  // Controller logic for GET request here",
      "});",
      "",
      "router.post('/', (req, res) => {",
      "  // Controller logic for POST request here",
      "});",
      "",
      "// Add more route handlers as needed",
      "",
      "module.exports = router;"
    ],
    "description": "Create an Express controller for handling routes"
  },  
  "Express Middleware": {
    "prefix": "dmiddleware",
    "body": [
      "function $1(req, res, next) {",
      "  // Middleware logic here",
      "  next();",
      "}",
      "",
      "module.exports = $1;"
    ],
    "description": "Create an Express middleware function"
  }
}